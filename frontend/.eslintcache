[{"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/store.js":"1","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/Subscription.js":"2","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/Navbar.js":"3","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/containers/Home.js":"4","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/UploadFile.js":"5","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/App.js":"6","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/actions/auth.js":"7","/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/hooks/useApiUploadService.js":"8"},{"size":398,"mtime":1699128617808,"results":"9","hashOfConfig":"10"},{"size":5957,"mtime":1704117413084,"results":"11","hashOfConfig":"10"},{"size":2223,"mtime":1704117148671,"results":"12","hashOfConfig":"10"},{"size":539,"mtime":1699497050975,"results":"13","hashOfConfig":"10"},{"size":6625,"mtime":1704100513212,"results":"14","hashOfConfig":"10"},{"size":1145,"mtime":1703270327616,"results":"15","hashOfConfig":"10"},{"size":3736,"mtime":1700270366456,"results":"16","hashOfConfig":"10"},{"size":2368,"mtime":1704115310680,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"yk0ksd",{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/store.js",["38"],"import { createStore, applyMiddleware, compose } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n",["39","40"],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/Subscription.js",["41","42","43","44","45","46"],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/Navbar.js",[],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/containers/Home.js",[],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/components/UploadFile.js",["47"],"import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useApiUploadService } from '../hooks/useApiUploadService'; \nimport { connect } from 'react-redux';\nimport { checkAuthenticated, load_user } from '../actions/auth';\n\nfunction UploadFile({ checkAuthenticated, load_user }) {\n    const [filename, setFilename] = useState('');\n    const [files, setFiles] = useState([]);\n    const [status, setStatus] = useState('');\n    const [subscription, setSubscription] = useState([]);\n    const [selectedPlan, setSelectedPlan] = useState(null);\n    const { uploadFile, getFiles, getSubscriptionsTypes, downloadWithAxios, deleteWithAxios } = useApiUploadService(); \n    const history = useHistory();\n\n    useEffect(() => {\n        checkAuthenticated();\n        load_user();\n        fetchSubscriptionDetails();\n        fetchFiles();\n    }, []);\n\n    const fetchFiles = async () => {\n        try {\n            const filesList = await getFiles();\n            setFiles(Array.isArray(filesList) ? filesList : []);\n        } catch (error) {\n            setStatus('Failed to load files');\n            setFiles([]);\n        }\n    };\n\n    const fetchSubscriptionDetails = async () => {\n        try {\n            const subscriptionList = await getSubscriptionsTypes();\n            setSubscription(Array.isArray(subscriptionList) ? subscriptionList : []); \n        } catch (error) {\n            setSubscription([]); \n        }\n    };\n\n    const handleFileUpload = async () => {\n        if (!filename || !(filename instanceof File)) {\n            setStatus('No file selected or invalid file');\n            return;\n        }\n    \n        const reader = new FileReader();\n        reader.onloadend = async () => {\n            try {\n                await uploadFile(new Blob([reader.result], { type: 'application/pdf' }), filename.name);\n                setStatus('File uploaded successfully');\n                fetchFiles();\n            } catch (error) {\n                setStatus(`Error in file upload: ${error.message}`);\n            }\n        };\n        reader.onerror = () => setStatus('Error reading the file');\n        reader.readAsArrayBuffer(filename);\n    };\n    \n    const handleFileChange = (event) => setFilename(event.target.files[0]);\n    \n    const handleFileDownload = async (fileId, title) => {\n        try {\n            await downloadWithAxios(fileId, title);\n            fetchFiles();\n        } catch (error) {\n            setStatus('Error downloading file');\n        }\n    }; \n    \n    const handleFileDelete = async (fileId, title) => {\n        try {\n            await deleteWithAxios(fileId, title);\n            const updatedFiles = files.filter(file => file.id !== fileId);\n            setFiles(updatedFiles)\n        } catch (error) {\n            setStatus('Error deleting file');\n        }\n    };\n\n    const selectPlanHandler = (id) => {\n        setSelectedPlan(id);\n        history.push('/subscription', { selectedPlanId: id });\n    };\n\n    return (\n        <div className=\"container-fluid\">\n            <h2 className=\"text-center alert alert-danger mt-2\">PDF to WORD Conversion Upload And Download</h2>\n            <div className=\"row\">\n                <div className=\"col-md-5\">\n                    <h2 className=\"alert alert-success\">WORD Upload Section</h2>\n                    <form>\n                        <div className=\"form-group\">\n                            <label htmlFor=\"exampleFormControlFile1\" className=\"float-left\">Browse A WORD File To Upload</label>\n                            <input type=\"file\" multiple onChange={handleFileChange} className=\"form-control\" />\n                        </div>\n                        <button type=\"button\" onClick={handleFileUpload} className=\"btn btn-primary float-left mt-2\">CONVERT</button>\n                        <br/><br/><br/>\n                        {status ? <h2>{status}</h2> : null}\n                    </form>\n                </div>\n                <div className=\"col-md-7\">\n                    <h2 className=\"alert alert-success\">List of Uploaded PDF Files</h2>\n                    <table className=\"table table-bordered mt-4\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">File Title</th>\n                                <th scope=\"col\">Download</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {files.map(file => (\n                                <tr key={file.id}>\n                                    <td>{file.word_file_name}</td>\n                                    <td>\n                                        <button onClick={() => handleFileDownload(file.id, file.word_file_name)} className=\"btn btn-success\" style={{ marginRight: '20px' }}>Download</button>\n                                        <button onClick={() => handleFileDelete(file.id, file.word_file_name)} class=\"btn btn-danger\">Delete</button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <div className=\"subscription-plans mt-4\">\n            <h2 className=\"text-center alert alert-info\">Subscription Plans</h2>\n            <div className=\"row\">\n                {Array.isArray(subscription) && subscription.map(subscription_type => (\n                    <div key={subscription_type.id} className=\"col-md-4 mb-4\">\n                        <div \n                            className={`card text-center ${selectedPlan === subscription_type.id ? 'border-primary' : ''}`}\n                            onClick={() => selectPlanHandler(subscription_type.id)}\n                            style={{ cursor: 'pointer' }}\n                        >\n                            <div className=\"card-header\">{subscription_type.subscription_type}</div>\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{subscription_type.price}</h5>\n                                <p className=\"card-text\">{subscription_type.features}</p>\n                                <p className=\"card-text\">{subscription_type.available}</p>\n                                <p className=\"card-text\">{subscription_type.cancel}</p>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default connect(null, { checkAuthenticated, load_user })(UploadFile);\n",["48","49"],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/App.js",[],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/actions/auth.js",[],"/mnt/c/courses/ppaw/pdf_to_word - Copy/frontend/src/hooks/useApiUploadService.js",[],{"ruleId":"50","severity":1,"message":"51","line":1,"column":40,"nodeType":"52","messageId":"53","endLine":1,"endColumn":47},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"50","severity":1,"message":"58","line":18,"column":11,"nodeType":"52","messageId":"53","endLine":18,"endColumn":31},{"ruleId":"50","severity":1,"message":"59","line":19,"column":13,"nodeType":"52","messageId":"53","endLine":19,"endColumn":22},{"ruleId":"50","severity":1,"message":"60","line":19,"column":24,"nodeType":"52","messageId":"53","endLine":19,"endColumn":29},{"ruleId":"50","severity":1,"message":"61","line":25,"column":19,"nodeType":"52","messageId":"53","endLine":25,"endColumn":24},{"ruleId":"62","severity":1,"message":"63","line":30,"column":8,"nodeType":"64","endLine":30,"endColumn":32,"suggestions":"65"},{"ruleId":"50","severity":1,"message":"66","line":41,"column":11,"nodeType":"52","messageId":"53","endLine":41,"endColumn":26},{"ruleId":"62","severity":1,"message":"67","line":21,"column":8,"nodeType":"64","endLine":21,"endColumn":10,"suggestions":"68"},{"ruleId":"54","replacedBy":"69"},{"ruleId":"56","replacedBy":"70"},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-native-reassign",["71"],"no-negated-in-lhs",["72"],"'subscriptionReceived' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'error' is assigned a value but never used.","'plans' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchSubscriptionDetails'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'handleSubscribe' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkAuthenticated', 'fetchFiles', 'fetchSubscriptionDetails', and 'load_user'. Either include them or remove the dependency array. If 'checkAuthenticated' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["74"],["71"],["72"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [fetchSubscriptionDetails, fetchSubscriptionPlans]",{"range":"79","text":"80"},"Update the dependencies array to be: [checkAuthenticated, fetchFiles, fetchSubscriptionDetails, load_user]",{"range":"81","text":"82"},[1298,1322],"[fetchSubscriptionDetails, fetchSubscriptionPlans]",[881,883],"[checkAuthenticated, fetchFiles, fetchSubscriptionDetails, load_user]"]